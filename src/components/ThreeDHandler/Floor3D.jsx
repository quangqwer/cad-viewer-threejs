import { useMemo } from "react";
import * as THREE from "three";

export default function Room3D({ points2D }) {
  const wallThickness = 1.5;
  const wallHeight = 30;

  const floorShape = useMemo(() => {
    return new THREE.Shape(points2D.map((p) => new THREE.Vector2(p.x, -p.y)));
  }, [points2D]);

  const wallMeshes = useMemo(() => {
    const meshes = [];

    for (let i = 0; i < points2D.length; i++) {
        const a = points2D[i];
        const b = points2D[(i + 1) % points2D.length];
      
        const dx = b.x - a.x;
        const dy = b.y - a.y;
        const length = Math.sqrt(dx * dx + dy * dy);
        const angle = Math.atan2(dy, dx);
      
        const geometry = new THREE.BoxGeometry(length, wallHeight, wallThickness);
        const material = new THREE.MeshStandardMaterial({ color: "black" });
        const wall = new THREE.Mesh(geometry, material);
      
        // T√≠nh trung ƒëi·ªÉm
        const centerX = (a.x + b.x) / 2;
        const centerY = -((a.y + b.y) / 2);
      
        // üëâ Offset v·ªã tr√≠ wall v√†o ph√≠a trong g√≥c
        // vector ph√°p tuy·∫øn (vu√¥ng g√≥c v·ªõi c·∫°nh)
        const normalX = -dy / length;
        const normalY = dx / length;
      
        // Di chuy·ªÉn wall v√†o trong n·ª≠a ƒë·ªô d√†y
        const offsetX = (wallThickness / 2) * normalX;
        const offsetY = (wallThickness / 2) * normalY;
      
        wall.position.set(centerX + offsetX, centerY - offsetY, wallHeight / 2);
      
        // üëâ Xoay ƒë√∫ng h∆∞·ªõng
        wall.rotation.z = -angle;
      
        // X·ª≠ l√Ω d·ª±ng ƒë·ª©ng (c≈©)
        if (i === 1 || i === 3) {
          wall.rotation.y = -Math.PI / 2;
        } else {
          wall.rotation.x = Math.PI / 2;
        }
      
        meshes.push(wall);
      }

    return meshes;
  }, [points2D]);

  return (
    <group>
      {/* S√†n nh√† */}
      <mesh>
        <extrudeGeometry
          args={[floorShape, { depth: 1, bevelEnabled: false }]}
        />
        <meshStandardMaterial color="gold" />
      </mesh>

      {/* T∆∞·ªùng d·ª±ng ƒë·ª©ng ƒë√∫ng h∆∞·ªõng t·ª´ng c·∫°nh */}
      {wallMeshes.map((wall, idx) => (
        <primitive key={idx} object={wall} />
      ))}
    </group>
  );
}
